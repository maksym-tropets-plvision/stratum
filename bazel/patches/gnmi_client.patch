diff --git a/cmd/gnmi_cli/gnmi_cli.go b/cmd/gnmi_cli/gnmi_cli.go
index 3214dd3..b5da902 100644
--- a/cmd/gnmi_cli/gnmi_cli.go
+++ b/cmd/gnmi_cli/gnmi_cli.go
@@ -51,7 +51,7 @@ import (
 )
 
 var (
-	q   = client.Query{TLS: &tls.Config{}}
+	q   = client.Query{/*TLS: &tls.Config{}*/}
 	mu  sync.Mutex
 	cfg = cli.Config{Display: func(b []byte) {
 		defer mu.Unlock()
@@ -97,8 +97,8 @@ func init() {
 	flag.StringVar(&cfg.Timestamp, "timestamp", "", "Specify timestamp formatting in output.  One of (<empty string>, on, raw, <FORMAT>) where <empty string> is disabled, on is human readable, raw is int64 nanos since epoch, and <FORMAT> is according to golang time.Format(<FORMAT>)")
 	flag.BoolVar(&cfg.DisplaySize, "display_size", false, "Display the total size of query response.")
 	flag.BoolVar(&cfg.Latency, "latency", false, "Display the latency for receiving each update (Now - update timestamp).")
-	flag.StringVar(&q.TLS.ServerName, "server_name", "", "When set, CLI will use this hostname to verify server certificate during TLS handshake.")
-	flag.BoolVar(&q.TLS.InsecureSkipVerify, "insecure", false, "When set, CLI will not verify the server certificate during TLS handshake.")
+//	flag.StringVar(&q.TLS.ServerName, "server_name", "", "When set, CLI will use this hostname to verify server certificate during TLS handshake.")
+//	flag.BoolVar(&q.TLS.InsecureSkipVerify, "insecure", false, "When set, CLI will not verify the server certificate during TLS handshake.")
 
 	// Shortcut flags that can be used in place of the longform flags above.
 	flag.Var(queryAddr, "a", "Short for address.")
